import { createSlice, PayloadAction } from "@reduxjs/toolkit";
import { IUserData } from "../api/counterAPI";
import { incrementAsync } from "./counterSlice";

export interface UserState {
  name: string;
  age: number;
  email: string;
  id: string;
  status?: "loading" | "fulfilled" | "rejected";
  isLoading?: boolean;
}

export const initialState: UserState = {
  name: "",
  age: 0,
  email: "",
  id: "",
  isLoading: false,
};

export const userSlice = createSlice({
  name: "user",
  initialState,
  reducers: {
    setUserName: (state, action) => {
      state.name = action.payload; // Mutate the state all you want with immer
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere;
  // including actions generated by createAsyncThunk or in other slices.

  extraReducers: (builder) => {
    // In the example below we are using an externally defined thunk action "incrementAsync" which lives in counterSlice;
    // Thunks are typically used to make async requests.

    // Handle the pending state since incrementAsync returns a promise
    builder.addCase(incrementAsync.pending, (state, action) => {
      state.status = "loading";
      state.isLoading = true;
    });
    // Handle the fulfilled state and store the data from incrementAsync and store the user details in user slice.
    builder.addCase(
      incrementAsync.fulfilled,
      (state, action: PayloadAction<Required<IUserData["data"]>>) => {
        const { user } = action?.payload;
        state.age = user.age;
        state.email = user.email;
        state.id = user.id;
        state.name = user.name;
        state.status = "fulfilled";
        state.isLoading = false;
      }
    );
    // Handle the action if the "incrementAsync" promise returns an error.
    builder.addCase(incrementAsync.rejected, (state, action) => {
      state.status = "rejected";
      state.isLoading = false;
    });
  },
});

// ========================================
// Alternative way to define extraReducers
// ========================================
//   extraReducers: {
//     // "map object API"
//     [counterSlice?.actions?.increment?.type]: (
//       state,
//       action /* action will be inferred as "any", as the map notation does not contain type information */
//     ) => {
//       state.age += 1;
//     },
//   },
